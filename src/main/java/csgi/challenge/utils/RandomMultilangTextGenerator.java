package csgi.challenge.utils;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.Random;
import java.util.UUID;

//Only code generated by AI and decompile from a class due to loss of all the code :(
public class RandomMultilangTextGenerator {
	private static final int TARGET_SIZE_MB = 300;
	private static final int TARGET_SIZE_BYTES = 314572800;
	private static final String MULTILANG_LETTERS = "aáàâäãåæcçeéèêëiíìîïnñoóòôöõøuúùûüsßzžtțlłrř";
	private static final String PUNCTUATION = ".,;:!?\"'()[]{}<>-/\\@#$%^&*_+=|~`";
	private static final Random random = new Random();

	public RandomMultilangTextGenerator() {
	}

	public static void main(String[] args) throws IOException {
		BufferedWriter writer = new BufferedWriter(new FileWriter("random_text_300mb.txt", StandardCharsets.UTF_8));

		try {
			String sentence;
			for (int totalBytes = 0; totalBytes < 314572800; totalBytes += sentence.getBytes(StandardCharsets.UTF_8).length + System.lineSeparator().getBytes().length) {
				sentence = generateSentence();
				writer.write(sentence);
				writer.newLine();
			}

			System.out.println("Done: Generated ~300MB file.");
		} catch (Throwable var5) {
			try {
				writer.close();
			} catch (Throwable var4) {
				var5.addSuppressed(var4);
			}

			throw var5;
		}

		writer.close();
	}

	private static String generateSentence() {
		int words = 2 + random.nextInt(10);
		StringBuilder sb = new StringBuilder();

		for (int i = 0; i < words; ++i) {
			sb.append(generateWord());
			if (random.nextInt(0, 100) <= 10) {
				sb.append(randomPunctuation());
			}

			sb.append(" ");
		}

		return sb.toString().trim();
	}

	private static String generateWord() {
		int len = random.nextInt(0, 8) + random.nextInt(0, 9);
		StringBuilder sb = new StringBuilder();

		for (int i = 0; i <= len; ++i) {
			sb.append(getChar());
		}

		return sb.toString();
	}

	private static char getChar() {
		return random.nextInt(0, 100) <= 20 ? "aáàâäãåæcçeéèêëiíìîïnñoóòôöõøuúùûüsßzžtțlłrř".charAt(random.nextInt("aáàâäãåæcçeéèêëiíìîïnñoóòôöõøuúùûüsßzžtțlłrř".length())) : (char) (97 + random.nextInt(26));
	}

	private static char randomPunctuation() {
		return ".,;:!?\"'()[]{}<>-/\\@#$%^&*_+=|~`".charAt(random.nextInt(".,;:!?\"'()[]{}<>-/\\@#$%^&*_+=|~`".length()));
	}
}